<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="productDAO">
	
	<select id="selectProductList" resultType="productVO" parameterType="productVO">
		SELECT 
			A.product_idx 
			, A.product_name 
			, A.product_price 
			, A.product_img 
			, A.product_address
			, A.created_date 
			, A.updated_date 
			, A.product_status 
			, ROUND((SELECT AVG(rental_review_score) FROM rental_review WHERE product_idx = A.product_idx), 1) rental_review_score_avg
		FROM 
			rental_post A
		WHERE 
			1=1 
	<if test="searchKeyword != '' and searchKeyword != null">
    	AND A.product_name LIKE CONCAT('%', #{searchKeyword}, '%')  
    </if>
    <if test="searchKeyword != '' and searchKeyword != null">
    	AND A.product_hash_tag LIKE CONCAT('%', #{searchKeyword}, '%')  
    </if>
    <if test="searchRagion != '' and searchRagion != null">
    	AND A.product_address LIKE CONCAT('%', #{searchRagion}, '%')  
    </if>
		<if test="searchOrderBy != '' and searchOrderBy != null">
			<if test='searchOrderBy eq "created_date".toString()'>
				<if test='searchOrderGb eq "DESC".toString() or searchOrderGb == null'>
				ORDER BY A.created_date DESC
				</if>
				
				<if test='searchOrderGb eq "ASC".toString()'>
				ORDER BY A.created_date ASC
				</if>
			</if>
			<if test='searchOrderBy eq "product_price".toString()'>
				<if test='searchOrderGb eq "DESC".toString()'>
				ORDER BY A.product_price DESC 
				</if>
				
				<if test='searchOrderGb eq "ASC".toString()'>
				ORDER BY A.product_price ASC 
				</if>
			</if>
			<if test='searchOrderBy eq "hit_cnt".toString()'>
				<if test='searchOrderGb eq "DESC".toString()'>
				ORDER BY A.hit_cnt DESC 
				</if>
				
				<if test='searchOrderGb eq "ASC".toString()'>
				ORDER BY A.hit_cnt ASC 
				</if>
			</if>
			<if test='searchOrderBy eq "rental_review_score".toString()'>
				<if test='searchOrderGb eq "DESC".toString()'>
				ORDER BY ROUND((SELECT AVG(rental_review_score) FROM rental_review WHERE product_idx = A.product_idx), 1) DESC 
				</if>
				
				<if test='searchOrderGb eq "ASC".toString()'>
				ORDER BY ROUND((SELECT AVG(rental_review_score) FROM rental_review WHERE product_idx = A.product_idx), 1) ASC 
				</if>
			</if>
		</if>
		<if test="searchOrderBy == null">
			ORDER BY A.created_date DESC 
		</if>
		LIMIT #{recordCountPerPage} OFFSET #{firstIndex} 
	</select>
	
	<select id="selectProductListCnt" resultType="int" parameterType="productVO">
		SELECT 
			COUNT(*) cnt 
		FROM 
			rental_post A
		WHERE 
			1=1 
	<if test="searchKeyword != '' and searchKeyword != null">
    	AND A.product_name LIKE CONCAT('%', #{searchKeyword}, '%')  
    </if>
    <if test="searchKeyword != '' and searchKeyword != null">
    	AND A.product_hash_tag LIKE CONCAT('%', #{searchKeyword}, '%')  
    </if>
    <if test="searchRagion != '' and searchRagion != null">
    	AND A.product_address LIKE CONCAT('%', #{searchRagion}, '%')  
    </if>
	</select>
	
	<select id="getProduct" resultType="productVO" parameterType="productVO">
		SELECT 
			A.product_idx
			, A.member_id 
			, (SELECT nickname FROM member WHERE member_id = A.member_id) nickname 
			, A.product_name
			, A.product_price
			, A.product_img
			, A.product_address
			, A.product_content
			, A.precaution
			, A.product_hash_tag
			, A.created_date
			, A.updated_date
			, A.product_status
			, ROUND((SELECT AVG(rental_review_score) FROM rental_review WHERE product_idx = A.product_idx), 1) rental_review_score_avg
			, (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx) review_cnt
			, ifnull(round( (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx AND rental_review_score = '1') / (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx) * 100,0), '0') AS rental_review_score_1_per
			, ifnull(round( (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx AND rental_review_score = '2') / (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx) * 100,0), '0') AS rental_review_score_2_per
			, ifnull(round( (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx AND rental_review_score = '3') / (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx) * 100,0), '0') AS rental_review_score_3_per
			, ifnull(round( (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx AND rental_review_score = '4') / (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx) * 100,0), '0') AS rental_review_score_4_per
			, ifnull(round( (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx AND rental_review_score = '5') / (SELECT count(*) cnt FROM rental_review WHERE product_idx = A.product_idx) * 100,0), '0') AS rental_review_score_5_per
		FROM 
			rental_post A
		WHERE 
			A.product_idx = #{product_idx} 
	</select>
	
	<update id="updateProductHitCnt" parameterType="productVO">
		UPDATE 
			rental_post 
		SET 
			hit_cnt = hit_cnt + 1 
		WHERE 
			product_idx = #{product_idx}
	</update>
	
	<select id="selectProductNotList" resultType="productVO" parameterType="productVO">
		SELECT 
			A.product_idx 
			, A.member_id 
			, (SELECT nickname FROM member WHERE member_id = A.member_id) nickname 
			, A.product_name 
			, A.product_price 
			, A.product_img 
			, A.product_address
			, A.created_date 
			, A.updated_date 
			, A.product_status 
		FROM 
			rental_post A 
		WHERE 
			1=1 
		AND A.product_idx != #{product_idx} 
	</select>
	
	<insert id="insertProduct" parameterType="productVO">
		INSERT INTO rental_post 
		(
			member_id, 
			product_name, 
			product_content, 
			precaution, 
			product_price, 
			product_img, 
			product_address, 
			product_hash_tag, 
			hit_cnt, 
			created_date, 
			updated_date, 
			product_status 
		) 
		VALUES 
		(
			#{member_id}, 
			#{product_name}, 
			#{product_content}, 
			#{precaution}, 
			#{product_price}, 
			#{product_img}, 
			#{product_address}, 
			#{product_hash_tag}, 
			'0', 
			now(), 
			now(), 
			'1' 
		)
	</insert>
	
	<update id="updateProduct" parameterType="productVO">
		UPDATE 
			rental_post 
		SET 
			product_name = #{product_name} 
			, product_price = #{product_price} 
			<if test="product_img != '' and product_img != null">
			, product_img = #{product_img} 
			</if>
			, product_address = #{product_address} 
			, precaution = #{precaution} 
			, product_content = #{product_content} 
			, product_hash_tag = #{product_hash_tag} 
			, updated_date = now() 
		WHERE 
			product_idx = #{product_idx} 
	</update>
	
	<update id="updateProductImgDel" parameterType="productVO">
		UPDATE 
			rental_post 
		SET 
			product_img = NULL 
		WHERE 
			product_idx = #{product_idx}
	</update>
	
	<delete id="deleteProduct" parameterType="productVO">
		DELETE FROM 
			rental_post 
		WHERE 
			product_idx = #{product_idx}
	</delete>
	
	<select id="selectProductReviewList" resultType="productVO" parameterType="productVO">
		SELECT 
			A.rental_review_id 
			, A.member_id 
			, (SELECT nickname FROM member WHERE member_id = A.member_id) nickname 
			, A.product_idx
			, A.rental_review_score
			, A.rental_review_content
			, A.created_date
			, A.updated_date
		FROM 
			rental_review A 
		WHERE 
			A.product_idx = #{product_idx} 
	</select>
	
</mapper>
